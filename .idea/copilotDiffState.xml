<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Rust Boot Camp &#10;&#10;A comprehensive Rust learning project designed to explore fundamental concepts and best practices in Rust programming.&#10;&#10;##  Project Overview&#10;&#10;This project serves as a hands-on learning environment for Rust programming language fundamentals. It demonstrates various Rust concepts including:&#10;&#10;- Module system and code organization&#10;- Function definitions and usage&#10;- Generic programming&#10;- String handling and formatting&#10;- Basic I/O operations&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;&#10;- Rust installed on your system (https://rustup.rs/)&#10;- Basic understanding of programming concepts&#10;&#10;### Installation&#10;&#10;1. Clone or download this repository&#10;2. Navigate to the project directory:&#10;   ```bash&#10;   cd rust-boot-camp&#10;   ```&#10;&#10;### Running the Project&#10;&#10;```bash&#10;# Compile and run the project&#10;cargo run&#10;&#10;# Check for compilation errors without running&#10;cargo check&#10;&#10;# Build the project (creates optimized executable)&#10;cargo build --release&#10;```&#10;&#10;##  Project Structure&#10;&#10;```&#10;rust-bbot-camp/&#10;├── .gitignore              # Git ignore patterns&#10;├── Cargo.toml              # Project configuration and dependencies&#10;├── Cargo.lock              # Dependency lock file&#10;├── README.md               # Project documentation&#10;├── TRAITSANDOOP.md         # Rust vs C# traits and OOP comparison&#10;├── makefile                # Makefile for custom build commands&#10;├── src/                    # Source code directory&#10;│   ├── main.rs                 # Main entry point&#10;│   ├── control_flow.rs         # Control flow examples (if/else, loops)&#10;│   ├── my_args.rs              # Command-line argument parsing&#10;│   ├── my_closures.rs          # Closures and functional programming&#10;│   ├── my_enums.rs             # Enum definitions and pattern matching&#10;│   ├── my_functions.rs         # Custom functions module&#10;│   ├── my_generic.rs           # Generic programming examples&#10;│   ├── my_hash_map.rs          # HashMap collection usage&#10;│   ├── my_http.rs              # HTTP requests and networking&#10;│   ├── my_iterator.rs          # Iterator trait and usage&#10;│   ├── my_match_expression.rs  # Match expressions&#10;│   ├── my_methods.rs           # Struct methods and impl blocks&#10;│   ├── my_option.rs            # Option&lt;T&gt; usage and error handling&#10;│   ├── my_option_overload.rs   # Advanced Option usage&#10;│   ├── my_serde.rs             # Serialization/deserialization with serde&#10;│   ├── my_struct.rs            # Struct definitions and implementations&#10;│   ├── my_traits.rs            # Trait definitions and usage&#10;│   ├── my_vec.rs               # Vec collection usage&#10;│   ├── user_inputs.rs          # User input handling examples&#10;│   ├── asyncs/                 # Async programming modules&#10;│   │   ├── mod.rs&#10;│   │   ├── my_smol.rs&#10;│   │   └── my_tokio.rs&#10;│   ├── clap/                   # Command-line argument parsing with clap&#10;│   │   ├── mod.rs&#10;│   │   └── my_cli.rs&#10;│   ├── external_process/       # Running external processes&#10;│   │   ├── mod.rs&#10;│   │   ├── my_external_proccess.rs&#10;│   │   └── my_folder/&#10;│   ├── file_system/            # File I/O and filesystem operations&#10;│   │   ├── mod.rs&#10;│   │   ├── my_file_system.rs&#10;│   │   └── data/               # Sample data files&#10;│   ├── tasks/                  # Task modules&#10;│   │   ├── mod.rs&#10;│   │   └── sort_values.rs&#10;│   ├── csv/                     # CSV handling module&#10;│   │   ├── mod.rs&#10;│   │   ├── my_csv.rs&#10;│   │   └── vehicle.csv&#10;│   └── time_module/            # Time and date handling&#10;│       ├── mod.rs&#10;│       ├── my_chrono.rs&#10;│       └── my_time.rs&#10;└── target/                 # Compiled artifacts (auto-generated)&#10;```&#10;&#10;##  Key Rust Concepts Demonstrated&#10;&#10;- **Modules &amp; Submodules**: Organizing code into files and folders, including nested modules (e.g., asyncs, file_system, tasks, time_module, clap, external_process)&#10;- **Functions &amp; Methods**: Defining and using functions, struct methods, and associated functions&#10;- **Generics**: Type-safe generic programming with `&lt;T&gt;` (see my_generic.rs)&#10;- **Traits**: Defining and implementing traits, using trait bounds (see my_traits.rs)&#10;- **Enums &amp; Pattern Matching**: Using enums and match expressions (see my_enums.rs, my_match_expression.rs)&#10;- **Collections**: Working with Vec, HashMap, and iterators (see my_vec.rs, my_hash_map.rs, my_iterator.rs)&#10;- **Closures**: Functional programming with closures (see my_closures.rs)&#10;- **Option &amp; Result**: Error handling and optional values (see my_option.rs, my_option_overload.rs)&#10;- **Command-line Arguments**: Parsing with std and the clap crate (see my_args.rs, clap/)&#10;- **File I/O**: Reading and writing files, handling filesystem data (see file_system/)&#10;- **Time &amp; Date**: Using chrono and std::time for date/time operations (see time_module/)&#10;- **Ownership &amp; Borrowing**: Safe memory management without garbage collection&#10;- **Serialization/Deserialization**: Using serde for working with JSON and other formats (see my_serde.rs)&#10;- **HTTP Requests**: Making HTTP requests and handling responses (see my_http.rs)&#10;- **Async Programming**: Using async/await with Smol and Tokio (see asyncs/)&#10;- **External Processes**: Running and managing external processes (see external_process/)&#10;- **CSV Handling**: Reading and writing CSV files (see csv/)&#10;&#10;##  Learning Objectives&#10;&#10;➡️ For a comparison of Rust's trait-based polymorphism with OOP in C#, see the [TRAITSANDOOP.md](./TRAITSANDOOP.md) file.&#10;&#10;By working with this project, you'll learn:&#10;&#10;1. **Project Structure &amp; Modules**: How to organize a Rust project with modules, submodules, and folders (see src/)&#10;2. **Function &amp; Method Definitions**: Creating reusable code blocks and struct methods (see my_functions.rs, my_methods.rs)&#10;3. **Generic Programming**: Writing type-safe, reusable code (see my_generic.rs)&#10;4. **Trait Implementation**: Defining and using traits for polymorphism (see my_traits.rs)&#10;5. **Enum &amp; Pattern Matching**: Handling multiple data types and control flow (see my_enums.rs, my_match_expression.rs)&#10;6. **Collections &amp; Iterators**: Using Vec, HashMap, and iterators (see my_vec.rs, my_hash_map.rs, my_iterator.rs)&#10;7. **Closures &amp; Functional Programming**: Using closures for concise code (see my_closures.rs)&#10;8. **Error Handling**: Using Option and Result types (see my_option.rs, my_option_overload.rs)&#10;9. **Command-line Parsing**: Handling arguments with std and clap (see my_args.rs, clap/)&#10;10. **File I/O**: Reading and writing files (see file_system/)&#10;11. **Time &amp; Date Handling**: Working with chrono and std::time (see time_module/)&#10;12. **Serialization/Deserialization**: Working with serde for JSON and other formats (see my_serde.rs)&#10;13. **HTTP Networking**: Making HTTP requests and processing responses (see my_http.rs)&#10;14. **Async Programming**: Using async/await with Smol and Tokio (see asyncs/)&#10;15. **External Processes**: Running and managing external processes (see external_process/)&#10;16. **CSV Handling**: Reading and writing CSV files (see csv/)&#10;17. **Cargo Tool**: Building, running, and managing Rust projects&#10;&#10;##  Next Steps for Learning&#10;&#10;Consider extending this project by adding:&#10;&#10;- [x] Error handling with `Result&lt;T, E&gt;` and `Option&lt;T&gt;` (see my_option.rs, my_option_overload.rs)&#10;- [x] Struct definitions and implementations (see my_struct.rs, my_methods.rs)&#10;- [x] Enums and pattern matching (see my_enums.rs, my_match_expression.rs)&#10;- [x] Collections (Vec, HashMap, etc.) (see my_vec.rs, my_hash_map.rs)&#10;- [x] File I/O operations (see file_system/)&#10;- [x] External crate dependencies (e.g., chrono, clap, serde)&#10;- [x] More advanced generic programming (see my_generic.rs)&#10;- [x] Command-line argument parsing (with std and clap) (see my_args.rs, clap/)&#10;- [x] Time and date handling (see time_module/)&#10;- [x] Serialization/deserialization (serde, JSON) (see my_serde.rs)&#10;- [x] HTTP requests and networking (see my_http.rs)&#10;- [x] Async programming (async/await, Smol, Tokio) (see asyncs/)&#10;- [x] External process management (see external_process/)&#10;- [x] CSV handling (see csv/)&#10;- [ ] Unit and integration tests (add tests/ folder and sample tests)&#10;- [ ] Error propagation and custom error types (create custom error modules)&#10;- [ ] More advanced trait usage and lifetimes (expand my_traits.rs)&#10;- [ ] Benchmarking and performance profiling (use criterion crate)&#10;- [ ] Documentation with rustdoc (add doc comments)&#10;&#10;Explore the [TRAITSANDOOP.md](./TRAITSANDOOP.md) file for a deeper understanding of Rust traits vs C# OOP.&#10;&#10;##  License&#10;&#10;This project is for learning purposes. Feel free to use, modify.&#10;&#10;##  Author&#10;&#10;- Kavinda Rathnayake&#10;&#10;### Happy Coding with **_Rust_**!  &#10;&#10;" />
              <option name="updatedContent" value="# Rust Boot Camp &#10;&#10;A comprehensive Rust learning project designed to explore fundamental concepts and best practices in Rust programming.&#10;&#10;##  Project Overview&#10;&#10;This project serves as a hands-on learning environment for Rust programming language fundamentals. It demonstrates various Rust concepts including:&#10;&#10;- Module system and code organization&#10;- Function definitions and usage&#10;- Generic programming&#10;- String handling and formatting&#10;- Basic I/O operations&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;&#10;- Rust installed on your system (https://rustup.rs/)&#10;- Basic understanding of programming concepts&#10;&#10;### Installation&#10;&#10;1. Clone or download this repository&#10;2. Navigate to the project directory:&#10;   ```bash&#10;   cd rust-boot-camp&#10;   ```&#10;&#10;### Running the Project&#10;&#10;```bash&#10;# Compile and run the project&#10;cargo run&#10;&#10;# Check for compilation errors without running&#10;cargo check&#10;&#10;# Build the project (creates optimized executable)&#10;cargo build --release&#10;```&#10;&#10;##  Project Structure&#10;&#10;```&#10;rust-bbot-camp/&#10;├── Cargo.toml              # Project configuration and dependencies&#10;├── Cargo.lock              # Dependency lock file&#10;├── README.md               # Project documentation&#10;├── TRAITSANDOOP.md         # Rust vs C# traits and OOP comparison&#10;├── makefile                # Custom build commands&#10;├── promts.txt              # Learning prompts and notes&#10;└── src/                    # Source code directory&#10;    ├── main.rs                     # Main entry point with module orchestration&#10;    │&#10;    ├──  Core Language Features&#10;    ├── control_flow.rs             # Control flow (if/else, loops, while)&#10;    ├── my_functions.rs             # Function definitions and usage&#10;    ├── my_generic.rs               # Generic programming and type parameters&#10;    ├── my_struct.rs                # Struct definitions and basic usage&#10;    ├── my_methods.rs               # Struct methods and impl blocks&#10;    ├── my_traits.rs                # Trait definitions and implementations&#10;    ├── my_enums.rs                 # Enum definitions and variants&#10;    ├── my_match_expression.rs      # Pattern matching with match&#10;    ├── my_closures.rs              # Closures and functional programming&#10;    ├── my_option.rs                # Option&lt;T&gt; for nullable values&#10;    ├── my_option_overload.rs       # Advanced Option usage patterns&#10;    ├── my_regular_expression.rs    # Regex pattern matching&#10;    │&#10;    ├──  Collections &amp; Data Structures&#10;    ├── my_vec.rs                   # Vector collection usage&#10;    ├── my_hash_map.rs              # HashMap key-value storage&#10;    ├── my_iterator.rs              # Iterator trait and lazy evaluation&#10;    │&#10;    ├──  External Integrations&#10;    ├── my_args.rs                  # Command-line argument parsing (std)&#10;    ├── my_http.rs                  # HTTP requests with reqwest&#10;    ├── my_serde.rs                 # JSON serialization/deserialization&#10;    │&#10;    ├──  Time &amp; Date Modules&#10;    ├── time_module/&#10;    │   ├── mod.rs                  # Time module declarations&#10;    │   ├── my_time.rs              # Standard library time operations&#10;    │   └── my_chrono.rs            # Chrono crate for advanced date/time&#10;    │&#10;    ├──  File &amp; Data Operations&#10;    ├── file_system/&#10;    │   ├── mod.rs                  # File system module declarations&#10;    │   ├── my_file_system.rs       # File I/O and directory operations&#10;    │   └── data/                   # Sample data files for testing&#10;    ├── csv/&#10;    │   ├── mod.rs                  # CSV module declarations&#10;    │   ├── my_csv.rs               # CSV reading and writing operations&#10;    │   └── vehicle.csv             # Sample CSV data file&#10;    │&#10;    ├──  User Interface &amp; CLI&#10;    ├── prompt_cmd/&#10;    │   ├── mod.rs                  # User input module declarations&#10;    │   ├── user_inputs.rs          # Basic user input handling&#10;    │   ├── my_inquire.rs           # Interactive prompts with inquire&#10;    │   └── my_clap.rs              # Advanced CLI with clap crate&#10;    ├── clap/&#10;    │   ├── mod.rs                  # Clap module declarations&#10;    │   └── my_cli.rs               # Command-line interface examples&#10;    │&#10;    ├── ⚡ Asynchronous Programming&#10;    ├── asyncs/&#10;    │   ├── mod.rs                  # Async module declarations&#10;    │   ├── my_smol.rs              # Async programming with smol runtime&#10;    │   └── my_tokio.rs             # Async programming with tokio runtime&#10;    │&#10;    ├──  Process &amp; Task Management&#10;    ├── external_process/&#10;    │   ├── mod.rs                  # External process module declarations&#10;    │   ├── my_external_proccess.rs # Running external commands&#10;    │   └── my_folder/              # Sample folder for process operations&#10;    ├── tasks/&#10;    │   ├── mod.rs                  # Task module declarations&#10;    │   └── sort_values.rs          # Sorting algorithms and data manipulation&#10;    │&#10;    └──  Testing &amp; Quality Assurance&#10;        └── unit_tests/&#10;            ├── mod.rs              # Unit test module declarations&#10;            ├── my_code.rs          # Code to be tested&#10;            └── my_test.rs          # Unit test implementations&#10;```&#10;&#10;##  Key Rust Concepts Demonstrated&#10;&#10;###  Core Language Features&#10;- **Ownership &amp; Borrowing**: Safe memory management without garbage collection&#10;- **Control Flow**: if/else statements, loops (for, while, loop) with break/continue (see control_flow.rs)&#10;- **Functions &amp; Methods**: Function definitions, struct methods, associated functions, and impl blocks (see my_functions.rs, my_methods.rs)&#10;- **Generics &amp; Type Parameters**: Type-safe generic programming with `&lt;T&gt;`, bounds, and constraints (see my_generic.rs)&#10;- **Traits**: Defining custom traits, implementing standard traits, trait bounds, and polymorphism (see my_traits.rs)&#10;- **Structs**: Data structure definitions, field access, destructuring (see my_struct.rs)&#10;- **Enums &amp; Pattern Matching**: Enum variants, match expressions, if let patterns (see my_enums.rs, my_match_expression.rs)&#10;- **Closures**: Anonymous functions, capturing environment, functional programming patterns (see my_closures.rs)&#10;- **Regular Expressions**: Pattern matching with regex crate for text processing (see my_regular_expression.rs)&#10;&#10;###  Collections &amp; Data Structures&#10;- **Vec&lt;T&gt;**: Dynamic arrays, push/pop, iteration, slicing (see my_vec.rs)&#10;- **HashMap&lt;K, V&gt;**: Key-value storage, insertion, lookup, iteration (see my_hash_map.rs)&#10;- **Iterators**: Lazy evaluation, map/filter/collect, iterator adapters and consumers (see my_iterator.rs)&#10;&#10;### ️ Error Handling &amp; Safety&#10;- **Option&lt;T&gt;**: Handling nullable values safely, Some/None patterns (see my_option.rs)&#10;- **Advanced Option Usage**: Chaining, unwrap variants, error propagation (see my_option_overload.rs)&#10;- **Result&lt;T, E&gt;**: Error handling with Ok/Err, ? operator for error propagation&#10;&#10;###  External Integrations &amp; I/O&#10;- **Command-line Arguments**: Parsing with std::env and advanced CLI with clap crate (see my_args.rs, clap/)&#10;- **HTTP Networking**: Making HTTP requests with reqwest, handling responses (see my_http.rs)&#10;- **JSON Serialization**: Working with serde for serialization/deserialization (see my_serde.rs)&#10;- **File System Operations**: Reading/writing files, directory traversal (see file_system/)&#10;- **CSV Processing**: Reading and writing CSV files with csv crate (see csv/)&#10;&#10;###  Time &amp; Date Management&#10;- **Standard Time**: Using std::time for basic time operations (see time_module/my_time.rs)&#10;- **Advanced Date/Time**: Using chrono crate for parsing, formatting, timezones (see time_module/my_chrono.rs)&#10;&#10;###  User Interface &amp; Interaction&#10;- **Basic Input**: Reading user input with std::io (see prompt_cmd/user_inputs.rs)&#10;- **Interactive Prompts**: Rich CLI interactions with inquire crate (see prompt_cmd/my_inquire.rs)&#10;- **Advanced CLI**: Subcommands, argument validation with clap (see prompt_cmd/my_clap.rs, clap/)&#10;&#10;### ⚡ Concurrency &amp; Asynchronous Programming&#10;- **Async/Await**: Asynchronous programming patterns with async functions&#10;- **Smol Runtime**: Lightweight async runtime for concurrent operations (see asyncs/my_smol.rs)&#10;- **Tokio Runtime**: Full-featured async runtime for network and I/O operations (see asyncs/my_tokio.rs)&#10;&#10;###  Process &amp; Task Management&#10;- **External Processes**: Running system commands, process spawning and management (see external_process/)&#10;- **Data Processing Tasks**: Sorting algorithms, data manipulation patterns (see tasks/)&#10;&#10;###  Testing &amp; Quality Assurance&#10;- **Unit Testing**: Writing and organizing unit tests with #[test] (see unit_tests/)&#10;- **Module Organization**: Separating code and tests for maintainability&#10;&#10;###  Package Management &amp; Build System&#10;- **Cargo**: Dependency management, build configuration, feature flags&#10;- **External Crates**: Integration with ecosystem crates (chrono, clap, serde, reqwest, etc.)&#10;- **Module System**: pub/private visibility, mod declarations, use statements&#10;&#10;##  Learning Objectives&#10;&#10;➡️ For a comparison of Rust's trait-based polymorphism with OOP in C#, see the [TRAITSANDOOP.md](./TRAITSANDOOP.md) file.&#10;&#10;By working with this project, you'll master these essential Rust concepts:&#10;&#10;###  Foundational Skills&#10;1. **Project Structure &amp; Module System**: &#10;   - Organizing code with `mod` declarations and `use` statements&#10;   - Creating nested modules and managing visibility with `pub`&#10;   - Understanding the difference between library crates and binary crates&#10;   - *Practice with*: All module files, especially nested ones like `time_module/`, `asyncs/`, etc.&#10;&#10;2. **Ownership, Borrowing &amp; Lifetimes**:&#10;   - Understanding move semantics and borrowing rules&#10;   - Working with references (`&amp;` and `&amp;mut`)&#10;   - Avoiding common ownership pitfalls&#10;   - *Practice with*: All modules, especially `my_struct.rs`, `my_methods.rs`&#10;&#10;3. **Functions &amp; Control Flow**:&#10;   - Defining functions with parameters and return types&#10;   - Control structures (if/else, loops, match)&#10;   - Early returns and error propagation&#10;   - *Practice with*: `my_functions.rs`, `control_flow.rs`&#10;&#10;###  Core Language Features&#10;4. **Data Types &amp; Structures**:&#10;   - Creating and using structs with named fields&#10;   - Implementing methods with `impl` blocks&#10;   - Understanding tuple structs and unit structs&#10;   - *Practice with*: `my_struct.rs`, `my_methods.rs`&#10;&#10;5. **Enums &amp; Pattern Matching**:&#10;   - Defining enums with variants and associated data&#10;   - Exhaustive pattern matching with `match`&#10;   - Using `if let` for specific pattern matching&#10;   - *Practice with*: `my_enums.rs`, `my_match_expression.rs`&#10;&#10;6. **Generic Programming**:&#10;   - Writing generic functions and structs with type parameters&#10;   - Understanding trait bounds and where clauses&#10;   - Working with generic collections&#10;   - *Practice with*: `my_generic.rs`, collections modules&#10;&#10;7. **Traits &amp; Polymorphism**:&#10;   - Defining custom traits and implementing them for types&#10;   - Using standard library traits (Clone, Debug, Display, etc.)&#10;   - Trait objects and dynamic dispatch&#10;   - *Practice with*: `my_traits.rs`, compare with `TRAITSANDOOP.md`&#10;&#10;### ️ Error Handling &amp; Safety&#10;8. **Option&lt;T&gt; for Null Safety**:&#10;   - Handling optional values with Some/None&#10;   - Chaining operations with map, and_then, or_else&#10;   - Converting between Option and Result&#10;   - *Practice with*: `my_option.rs`, `my_option_overload.rs`&#10;&#10;9. **Result&lt;T, E&gt; for Error Handling**:&#10;   - Propagating errors with the `?` operator&#10;   - Handling multiple error types&#10;   - Creating custom error types&#10;   - *Practice with*: File I/O, HTTP requests, CSV parsing modules&#10;&#10;###  Collections &amp; Functional Programming&#10;10. **Collections Mastery**:&#10;    - Vector operations: push, pop, indexing, slicing&#10;    - HashMap operations: insert, get, iteration&#10;    - Choosing the right collection for the task&#10;    - *Practice with*: `my_vec.rs`, `my_hash_map.rs`&#10;&#10;11. **Iterator Patterns**:&#10;    - Understanding lazy evaluation&#10;    - Using iterator adapters (map, filter, take, etc.)&#10;    - Consuming iterators (collect, fold, for_each, etc.)&#10;    - *Practice with*: `my_iterator.rs`, `my_closures.rs`&#10;&#10;12. **Closures &amp; Functional Programming**:&#10;    - Creating closures with different capture modes&#10;    - Using closures with iterator methods&#10;    - Understanding Fn, FnMut, and FnOnce traits&#10;    - *Practice with*: `my_closures.rs`&#10;&#10;###  Real-World Integration&#10;13. **External Crate Integration**:&#10;    - Managing dependencies with Cargo.toml&#10;    - Working with popular crates (serde, chrono, clap, reqwest)&#10;    - Understanding semantic versioning&#10;    - *Practice with*: All external integration modules&#10;&#10;14. **File System &amp; I/O Operations**:&#10;    - Reading and writing files safely&#10;    - Working with paths and directories&#10;    - Handling I/O errors gracefully&#10;    - *Practice with*: `file_system/`, `csv/`&#10;&#10;15. **Network Programming &amp; APIs**:&#10;    - Making HTTP requests with reqwest&#10;    - Handling JSON with serde&#10;    - Async programming patterns&#10;    - *Practice with*: `my_http.rs`, `my_serde.rs`, `asyncs/`&#10;&#10;16. **Command-Line Interface Development**:&#10;    - Parsing arguments with std::env&#10;    - Building robust CLIs with clap&#10;    - Creating interactive prompts&#10;    - *Practice with*: `my_args.rs`, `clap/`, `prompt_cmd/`&#10;&#10;### ⚡ Advanced Topics&#10;17. **Asynchronous Programming**:&#10;    - Understanding async/await syntax&#10;    - Working with different async runtimes (Tokio, Smol)&#10;    - Handling concurrent operations safely&#10;    - *Practice with*: `asyncs/my_tokio.rs`, `asyncs/my_smol.rs`&#10;&#10;18. **Process Management &amp; System Integration**:&#10;    - Running external commands&#10;    - Handling process output and errors&#10;    - Working with environment variables&#10;    - *Practice with*: `external_process/`&#10;&#10;19. **Testing &amp; Code Quality**:&#10;    - Writing unit tests with #[test]&#10;    - Organizing test code&#10;    - Using assert macros effectively&#10;    - *Practice with*: `unit_tests/`&#10;&#10;20. **Regular Expressions &amp; Text Processing**:&#10;    - Creating and using regex patterns&#10;    - Capturing groups and replacements&#10;    - Performance considerations with regex&#10;    - *Practice with*: `my_regular_expression.rs`&#10;&#10;##  Next Steps for Learning&#10;&#10;### ✅ Completed Features&#10;- [x] **Core Language Fundamentals**&#10;  - Error handling with `Result&lt;T, E&gt;` and `Option&lt;T&gt;` (see my_option.rs, my_option_overload.rs)&#10;  - Struct definitions and implementations (see my_struct.rs, my_methods.rs)&#10;  - Enums and pattern matching (see my_enums.rs, my_match_expression.rs)&#10;  - Generic programming (see my_generic.rs)&#10;  - Trait definitions and implementations (see my_traits.rs)&#10;&#10;- [x] **Collections &amp; Data Structures**&#10;  - Vec, HashMap, and iterators (see my_vec.rs, my_hash_map.rs, my_iterator.rs)&#10;  - Closures and functional programming (see my_closures.rs)&#10;&#10;- [x] **External Integrations**&#10;  - Command-line argument parsing with std and clap (see my_args.rs, clap/)&#10;  - File I/O operations (see file_system/)&#10;  - Time and date handling (see time_module/)&#10;  - JSON serialization/deserialization with serde (see my_serde.rs)&#10;  - HTTP requests and networking (see my_http.rs)&#10;  - CSV file processing (see csv/)&#10;&#10;- [x] **Advanced Features**&#10;  - Async programming with Smol and Tokio runtimes (see asyncs/)&#10;  - External process management (see external_process/)&#10;  - Regular expression processing (see my_regular_expression.rs)&#10;  - Interactive CLI development (see prompt_cmd/)&#10;&#10;###  Intermediate Enhancements&#10;- [ ] **Enhanced Error Handling**&#10;  - Create custom error types with `thiserror` crate&#10;  - Implement error conversion with `From` trait&#10;  - Add comprehensive error propagation examples&#10;  - *Suggested files*: `src/errors/mod.rs`, `src/errors/custom_errors.rs`&#10;&#10;- [ ] **Advanced Testing**&#10;  - Expand unit tests with comprehensive test coverage&#10;  - Add integration tests in `tests/` directory&#10;  - Property-based testing with `proptest` crate&#10;  - Benchmarking with `criterion` crate&#10;  - *Suggested files*: `tests/integration_tests.rs`, `benches/benchmarks.rs`&#10;&#10;- [ ] **Memory Management &amp; Performance**&#10;  - Reference counting with `Rc&lt;T&gt;` and `Arc&lt;T&gt;`&#10;  - Interior mutability with `RefCell&lt;T&gt;` and `Mutex&lt;T&gt;`&#10;  - Zero-copy string handling with `Cow&lt;str&gt;`&#10;  - Memory profiling and optimization techniques&#10;  - *Suggested files*: `src/memory/`, `src/performance/`&#10;&#10;- [ ] **Advanced Trait Usage**&#10;  - Trait objects and dynamic dispatch&#10;  - Associated types vs generic parameters&#10;  - Higher-ranked trait bounds (HRTB)&#10;  - Blanket implementations&#10;  - *Suggested files*: `src/advanced_traits.rs`&#10;&#10;###  Advanced Learning Paths&#10;&#10;####  Systems Programming Track&#10;- [ ] **Low-Level Programming**&#10;  - Unsafe Rust for performance-critical code&#10;  - FFI (Foreign Function Interface) with C libraries&#10;  - Memory layout and representation&#10;  - SIMD operations for parallel computation&#10;&#10;- [ ] **Network Programming**&#10;  - TCP/UDP socket programming&#10;  - WebSocket implementations&#10;  - Custom protocol development&#10;  - Network security and TLS&#10;&#10;- [ ] **Concurrency &amp; Parallelism**&#10;  - Thread pools and work stealing&#10;  - Message passing with channels&#10;  - Lock-free data structures&#10;  - Parallel iterators with `rayon`&#10;&#10;#### ️ Application Development Track&#10;- [ ] **GUI Development**&#10;  - Desktop applications with `egui` or `tauri`&#10;  - Cross-platform development strategies&#10;  - Event-driven programming patterns&#10;&#10;- [ ] **Web Development**&#10;  - Web servers with `axum` or `warp`&#10;  - REST API development&#10;  - WebAssembly (WASM) compilation&#10;  - Database integration with `sqlx`&#10;&#10;- [ ] **CLI Tool Development**&#10;  - Advanced argument parsing with subcommands&#10;  - Configuration file handling&#10;  - Plugin architectures&#10;  - Cross-platform deployment&#10;&#10;####  Specialized Domains&#10;- [ ] **Game Development**&#10;  - Game engines with `bevy`&#10;  - Real-time systems programming&#10;  - Physics simulation&#10;  - Graphics programming&#10;&#10;- [ ] **Data Science &amp; ML**&#10;  - Data processing with `polars`&#10;  - Machine learning with `candle`&#10;  - Scientific computing patterns&#10;  - Numerical computation libraries&#10;&#10;- [ ] **Blockchain &amp; Crypto**&#10;  - Cryptographic primitives&#10;  - Blockchain development&#10;  - Smart contract platforms&#10;  - Decentralized applications&#10;&#10;###  Learning Resources &amp; Next Steps&#10;1. **Read the Official Rust Book**: Complete chapters on lifetimes, smart pointers, and concurrency&#10;2. **Explore Rust by Example**: Practice with more advanced examples&#10;3. **Join the Community**: Participate in Rust forums, Discord, and contribute to open source&#10;4. **Build Real Projects**: Create applications that solve actual problems&#10;5. **Study Popular Crates**: Examine source code of well-known Rust libraries&#10;&#10;###  Continuous Improvement&#10;- **Code Reviews**: Share your code with the Rust community for feedback&#10;- **Performance Profiling**: Learn to identify and optimize bottlenecks&#10;- **Documentation**: Practice writing clear, comprehensive documentation&#10;- **Testing**: Develop habits of writing tests alongside code&#10;- **Refactoring**: Regularly improve code structure and design&#10;&#10;➡️ **Compare with other languages**: See [TRAITSANDOOP.md](./TRAITSANDOOP.md) for Rust vs C# comparisons to understand Rust's unique approaches." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.rs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.rs" />
              <option name="originalContent" value="//! # This is Rust Bootcamp, a collection of Rust code examples and exercises.&#10;//! This project is designed to help you learn Rust by providing practical examples and tasks.&#10;//! Each module contains a specific topic or task, and you can run them individually to see how they work.&#10;//!&#10;//! ### Features:&#10;//!&#10;//! - [x] Error handling with `Result&lt;T, E&gt;` and `Option&lt;T&gt;`&#10;//! - [x] Struct definitions and implementations&#10;//! - [x] Enums and pattern matching&#10;//! - [x] Collections (Vec, HashMap, etc.)&#10;//! - [x] File I/O operations&#10;//! - [x] External crate dependencies (e.g., chrono, clap, serde)&#10;//! - [x] More advanced generic programming&#10;//! - [x] Command-line argument parsing (with std and clap)&#10;//! - [x] Time and date handling&#10;//! - [x] Serialization/deserialization (serde, JSON)&#10;//! - [x] HTTP requests and networking&#10;//! - [ ] Unit and integration tests&#10;//! - [ ] Asynchronous programming (asyncs/await)&#10;//! - [ ] Error propagation and custom error types&#10;//! - [ ] More advanced trait usage and lifetimes&#10;//! - [ ] Benchmarking and performance profiling&#10;//! - [ ] Documentation with rustdoc&#10;&#10;mod asyncs;&#10;mod clap;&#10;mod control_flow;&#10;mod csv;&#10;mod external_process;&#10;mod file_system;&#10;mod my_args;&#10;mod my_closures;&#10;mod my_enums;&#10;mod my_functions;&#10;mod my_generic;&#10;mod my_hash_map;&#10;mod my_http;&#10;mod my_iterator;&#10;mod my_match_expression;&#10;mod my_methods;&#10;mod my_option;&#10;mod my_option_overload;&#10;mod my_regular_expression;&#10;mod my_serde;&#10;mod my_struct;&#10;mod my_traits;&#10;mod my_vec;&#10;mod prompt_cmd;&#10;mod tasks;&#10;mod time_module;&#10;mod unit_tests;&#10;&#10;// ================================ without async ================================&#10;#[allow(dead_code)]&#10;fn main() {&#10;    // Call the start function from the my_functions module&#10;    // my_functions::start();&#10;&#10;    // Call the start function from the control_flow module&#10;    // control_flow::start();&#10;&#10;    // Call the start function from the user_inputs module&#10;    // prompt_cmd::user_inputs::start();&#10;&#10;    // Call the start function from the my_closures module&#10;    // my_closures::start();&#10;&#10;    // Call the start function from the my_match_expression module&#10;    // my_match_expression::start();&#10;&#10;    // Call the start function from the my_enums module&#10;    // my_enums::start();&#10;&#10;    // Call the start function from the my_option module&#10;    // my_option::start();&#10;&#10;    // Call the start function from the my_struct module&#10;    // my_struct::start();&#10;&#10;    // Call the start function from my_methods module&#10;    // my_methods::start()&#10;&#10;    // Call the start function from the my_generic module&#10;    // my_generic::start();&#10;&#10;    // Call the start function from the my_traits module&#10;    // my_traits::start();&#10;&#10;    // Call the start function from the my_vec module&#10;    // my_vec::start();&#10;&#10;    // Call the start function from the my_hash_map&#10;    // my_hash_map::start();&#10;&#10;    // Call the start function from the my_iterator module&#10;    // my_iterator::start();&#10;&#10;    // Call the start function from the time_module module&#10;    // time_module::my_time::start();&#10;    // time_module::my_chrono::start();&#10;&#10;    // Call the start function from the file_system module&#10;    // file_system::my_file_system::start();&#10;&#10;    // Call the start function from the my_args module&#10;    // my_args::start();&#10;&#10;    // Call the start function from the clap module&#10;    // clap::my_cli::start();&#10;&#10;    // Call the start function from the my_serde module&#10;    // my_serde::start();&#10;&#10;    // Call the start function from the my_http module&#10;    // my_http::start();&#10;&#10;    // Call the start function from the my_option_overload module&#10;    // my_option_overload::start();&#10;&#10;    // Call the start function from the external_process module&#10;    // external_process::my_external_proccess::start();&#10;&#10;    // Call the start function from the csv module&#10;    // csv::my_csv::start();&#10;&#10;    // Call the start function from the my_regular_expression module&#10;    // my_regular_expression::start();&#10;&#10;    // Call the start function from the unit_tests module&#10;    // unit_tests::my_code::start();&#10;&#10;    // Call the start function from the prompt_cmd module&#10;    // prompt_cmd::my_inquire::start();&#10;    prompt_cmd::my_clap::start();&#10;&#10;    // Call the start function from the tasks::sort_values module&#10;    // tasks::sort_values::start();&#10;&#10;    println!(&quot;End of main function&quot;);&#10;}&#10;&#10;// ================================ with async ================================&#10;&#10;// ===== with Smol =====&#10;// fn main() {&#10;//     // Call the start function from the my_smol module&#10;//     asyncs::my_smol::start();&#10;// }&#10;&#10;// ===== with Tokio =====&#10;// #[tokio::main]&#10;// async fn main() {&#10;//     // Call the start function from the my_tokio module&#10;//     asyncs::my_tokio::start().await;&#10;// }&#10;" />
              <option name="updatedContent" value="//! # Rust Boot Camp &#10;//! &#10;//! A comprehensive Rust learning project that demonstrates fundamental to advanced concepts&#10;//! in Rust programming through practical, hands-on examples.&#10;//!&#10;//! ##  Project Purpose&#10;//! This project serves as a structured learning environment for mastering Rust programming.&#10;//! Each module focuses on specific concepts, progressing from basic language features to&#10;//! advanced topics like async programming, external integrations, and system programming.&#10;//!&#10;//! ##  Module Organization&#10;//!&#10;//! ###  Core Language Features&#10;//! - [`control_flow`] - Control structures: if/else, loops, while, break/continue&#10;//! - [`my_functions`] - Function definitions, parameters, return types&#10;//! - [`my_struct`] - Struct definitions and basic usage patterns&#10;//! - [`my_methods`] - Implementation blocks and struct methods&#10;//! - [`my_traits`] - Trait definitions, implementations, and polymorphism&#10;//! - [`my_generic`] - Generic programming with type parameters and bounds&#10;//! - [`my_enums`] - Enum variants and associated data&#10;//! - [`my_match_expression`] - Pattern matching with match and if let&#10;//! - [`my_closures`] - Anonymous functions and functional programming&#10;//! - [`my_option`] - Option&lt;T&gt; for safe nullable value handling&#10;//! - [`my_option_overload`] - Advanced Option usage patterns and chaining&#10;//! - [`my_regular_expression`] - Regex pattern matching for text processing&#10;//!&#10;//! ###  Collections &amp; Data Structures&#10;//! - [`my_vec`] - Vector operations: push, pop, iteration, slicing&#10;//! - [`my_hash_map`] - HashMap key-value storage and manipulation&#10;//! - [`my_iterator`] - Iterator patterns, lazy evaluation, adapters/consumers&#10;//!&#10;//! ###  External Integrations &amp; I/O&#10;//! - [`my_args`] - Command-line argument parsing with std::env&#10;//! - [`my_http`] - HTTP requests with reqwest crate&#10;//! - [`my_serde`] - JSON serialization/deserialization&#10;//!&#10;//! ###  Time &amp; Date Management&#10;//! - [`time_module::my_time`] - Standard library time operations&#10;//! - [`time_module::my_chrono`] - Advanced date/time with chrono crate&#10;//!&#10;//! ###  File &amp; Data Operations&#10;//! - [`file_system::my_file_system`] - File I/O and directory operations&#10;//! - [`csv::my_csv`] - CSV file reading and writing&#10;//!&#10;//! ###  User Interface &amp; CLI&#10;//! - [`prompt_cmd::user_inputs`] - Basic user input handling&#10;//! - [`prompt_cmd::my_inquire`] - Interactive prompts with inquire crate&#10;//! - [`prompt_cmd::my_clap`] - Advanced CLI with clap integration&#10;//! - [`clap::my_cli`] - Command-line interface examples&#10;//!&#10;//! ### ⚡ Asynchronous Programming&#10;//! - [`asyncs::my_smol`] - Async programming with smol runtime&#10;//! - [`asyncs::my_tokio`] - Async programming with tokio runtime&#10;//!&#10;//! ###  Process &amp; Task Management&#10;//! - [`external_process::my_external_proccess`] - Running external commands&#10;//! - [`tasks::sort_values`] - Sorting algorithms and data manipulation&#10;//!&#10;//! ###  Testing &amp; Quality Assurance&#10;//! - [`unit_tests::my_code`] - Code to be tested&#10;//! - [`unit_tests::my_test`] - Unit test implementations&#10;//!&#10;//! ##  Getting Started&#10;//!&#10;//! ### Running Individual Modules&#10;//! To explore a specific concept, uncomment the corresponding line in the `main()` function:&#10;//!&#10;//! ```rust,no_run&#10;//! fn main() {&#10;//!     // Uncomment any of these to run specific examples:&#10;//!     // my_functions::start();           // Basic function usage&#10;//!     // my_struct::start();              // Struct definitions&#10;//!     // my_traits::start();              // Trait implementations&#10;//!     // asyncs::my_tokio::start().await; // Async programming (requires #[tokio::main])&#10;//! }&#10;//! ```&#10;//!&#10;//! ### Command-Line Arguments&#10;//! Some modules support command-line arguments for interactive learning:&#10;//!&#10;//! ```bash&#10;//! # Run with arguments for specific modules&#10;//! cargo run -- arg1 arg2&#10;//! &#10;//! # Example: Testing command-line parsing&#10;//! cargo run -- &quot;John Doe&quot; 25&#10;//! ```&#10;//!&#10;//! ##  Learning Path Recommendations&#10;//!&#10;//! ### Beginner Track&#10;//! 1. Start with `my_functions` and `control_flow`&#10;//! 2. Learn data structures with `my_struct` and `my_methods`&#10;//! 3. Explore collections with `my_vec` and `my_hash_map`&#10;//! 4. Practice error handling with `my_option`&#10;//!&#10;//! ### Intermediate Track&#10;//! 1. Master pattern matching with `my_enums` and `my_match_expression`&#10;//! 2. Dive into generic programming with `my_generic`&#10;//! 3. Understand traits and polymorphism with `my_traits`&#10;//! 4. Explore functional programming with `my_closures` and `my_iterator`&#10;//!&#10;//! ### Advanced Track&#10;//! 1. Learn async programming with `asyncs` modules&#10;//! 2. Practice external integrations with `my_http` and `my_serde`&#10;//! 3. Build CLI applications with `clap` and `prompt_cmd` modules&#10;//! 4. Explore system programming with `external_process`&#10;//!&#10;//! ##  Additional Resources&#10;//! - For Rust vs C# comparisons, see the `TRAITSANDOOP.md` file&#10;//! - Each module contains comprehensive examples and documentation&#10;//! - Run `cargo doc --open` to generate and view full API documentation&#10;//!&#10;//! ## ⚙️ Features Demonstrated&#10;//! - ✅ Memory safety without garbage collection&#10;//! - ✅ Zero-cost abstractions and compile-time optimizations&#10;//! - ✅ Fearless concurrency with ownership system&#10;//! - ✅ Pattern matching and algebraic data types&#10;//! - ✅ Trait-based polymorphism&#10;//! - ✅ Functional programming patterns&#10;//! - ✅ Async/await for concurrent programming&#10;//! - ✅ Rich ecosystem integration&#10;//! - ✅ Cross-platform development&#10;//! - ✅ Performance-critical system programming&#10;&#10;mod asyncs;&#10;mod clap;&#10;mod control_flow;&#10;mod csv;&#10;mod external_process;&#10;mod file_system;&#10;mod my_args;&#10;mod my_closures;&#10;mod my_enums;&#10;mod my_functions;&#10;mod my_generic;&#10;mod my_hash_map;&#10;mod my_http;&#10;mod my_iterator;&#10;mod my_match_expression;&#10;mod my_methods;&#10;mod my_option;&#10;mod my_option_overload;&#10;mod my_regular_expression;&#10;mod my_serde;&#10;mod my_struct;&#10;mod my_traits;&#10;mod my_vec;&#10;mod prompt_cmd;&#10;mod tasks;&#10;mod time_module;&#10;mod unit_tests;&#10;&#10;// ================================ without async ================================&#10;#[allow(dead_code)]&#10;fn main() {&#10;    // Call the start function from the my_functions module&#10;    // my_functions::start();&#10;&#10;    // Call the start function from the control_flow module&#10;    // control_flow::start();&#10;&#10;    // Call the start function from the user_inputs module&#10;    // prompt_cmd::user_inputs::start();&#10;&#10;    // Call the start function from the my_closures module&#10;    // my_closures::start();&#10;&#10;    // Call the start function from the my_match_expression module&#10;    // my_match_expression::start();&#10;&#10;    // Call the start function from the my_enums module&#10;    // my_enums::start();&#10;&#10;    // Call the start function from the my_option module&#10;    // my_option::start();&#10;&#10;    // Call the start function from the my_struct module&#10;    // my_struct::start();&#10;&#10;    // Call the start function from my_methods module&#10;    // my_methods::start()&#10;&#10;    // Call the start function from the my_generic module&#10;    // my_generic::start();&#10;&#10;    // Call the start function from the my_traits module&#10;    // my_traits::start();&#10;&#10;    // Call the start function from the my_vec module&#10;    // my_vec::start();&#10;&#10;    // Call the start function from the my_hash_map&#10;    // my_hash_map::start();&#10;&#10;    // Call the start function from the my_iterator module&#10;    // my_iterator::start();&#10;&#10;    // Call the start function from the time_module module&#10;    // time_module::my_time::start();&#10;    // time_module::my_chrono::start();&#10;&#10;    // Call the start function from the file_system module&#10;    // file_system::my_file_system::start();&#10;&#10;    // Call the start function from the my_args module&#10;    // my_args::start();&#10;&#10;    // Call the start function from the clap module&#10;    // clap::my_cli::start();&#10;&#10;    // Call the start function from the my_serde module&#10;    // my_serde::start();&#10;&#10;    // Call the start function from the my_http module&#10;    // my_http::start();&#10;&#10;    // Call the start function from the my_option_overload module&#10;    // my_option_overload::start();&#10;&#10;    // Call the start function from the external_process module&#10;    // external_process::my_external_proccess::start();&#10;&#10;    // Call the start function from the csv module&#10;    // csv::my_csv::start();&#10;&#10;    // Call the start function from the my_regular_expression module&#10;    // my_regular_expression::start();&#10;&#10;    // Call the start function from the unit_tests module&#10;    // unit_tests::my_code::start();&#10;&#10;    // Call the start function from the prompt_cmd module&#10;    // prompt_cmd::my_inquire::start();&#10;    prompt_cmd::my_clap::start();&#10;&#10;    // Call the start function from the tasks::sort_values module&#10;    // tasks::sort_values::start();&#10;&#10;    println!(&quot;End of main function&quot;);&#10;}&#10;&#10;// ================================ with async ================================&#10;&#10;// ===== with Smol =====&#10;// fn main() {&#10;//     // Call the start function from the my_smol module&#10;//     asyncs::my_smol::start();&#10;// }&#10;&#10;// ===== with Tokio =====&#10;// #[tokio::main]&#10;// async fn main() {&#10;//     // Call the start function from the my_tokio module&#10;//     asyncs::my_tokio::start().await;&#10;// }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>